#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Survey.BusinessLogic
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Survey")]
	public partial class DALDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTestSurveyQuestion(TestSurveyQuestion instance);
    partial void UpdateTestSurveyQuestion(TestSurveyQuestion instance);
    partial void DeleteTestSurveyQuestion(TestSurveyQuestion instance);
    partial void InsertTestSurveyAnswer(TestSurveyAnswer instance);
    partial void UpdateTestSurveyAnswer(TestSurveyAnswer instance);
    partial void DeleteTestSurveyAnswer(TestSurveyAnswer instance);
    partial void InsertTestSurveyScore(TestSurveyScore instance);
    partial void UpdateTestSurveyScore(TestSurveyScore instance);
    partial void DeleteTestSurveyScore(TestSurveyScore instance);
    #endregion
		
		public DALDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["SurveyConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DALDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DALDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DALDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DALDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TestSurveyQuestion> TestSurveyQuestions
		{
			get
			{
				return this.GetTable<TestSurveyQuestion>();
			}
		}
		
		public System.Data.Linq.Table<TestSurveyAnswer> TestSurveyAnswers
		{
			get
			{
				return this.GetTable<TestSurveyAnswer>();
			}
		}
		
		public System.Data.Linq.Table<TestSurveyScore> TestSurveyScores
		{
			get
			{
				return this.GetTable<TestSurveyScore>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TestSurveyQuestions")]
	public partial class TestSurveyQuestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SurveyQuestionID;
		
		private string _Text;
		
		private bool _IsActive;
		
		private string _Titles;
		
		private string _Title;
		
		private bool _IsRequired;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSurveyQuestionIDChanging(int value);
    partial void OnSurveyQuestionIDChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnTitlesChanging(string value);
    partial void OnTitlesChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnIsRequiredChanging(bool value);
    partial void OnIsRequiredChanged();
    #endregion
		
		public TestSurveyQuestion()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SurveyQuestionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SurveyQuestionID
		{
			get
			{
				return this._SurveyQuestionID;
			}
			set
			{
				if ((this._SurveyQuestionID != value))
				{
					this.OnSurveyQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._SurveyQuestionID = value;
					this.SendPropertyChanged("SurveyQuestionID");
					this.OnSurveyQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(512) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Titles", DbType="NVarChar(256)")]
		public string Titles
		{
			get
			{
				return this._Titles;
			}
			set
			{
				if ((this._Titles != value))
				{
					this.OnTitlesChanging(value);
					this.SendPropertyChanging();
					this._Titles = value;
					this.SendPropertyChanged("Titles");
					this.OnTitlesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(256)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRequired", DbType="Bit NOT NULL")]
		public bool IsRequired
		{
			get
			{
				return this._IsRequired;
			}
			set
			{
				if ((this._IsRequired != value))
				{
					this.OnIsRequiredChanging(value);
					this.SendPropertyChanging();
					this._IsRequired = value;
					this.SendPropertyChanged("IsRequired");
					this.OnIsRequiredChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TestSurveyAnswers")]
	public partial class TestSurveyAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SurveyAnswerID;
		
		private string _Name;
		
		private string _Email;
		
		private int _Age;
		
		private string _Gender;
		
		private string _Country;
		
		private string _Comment;
		
		private EntitySet<TestSurveyScore> _TestSurveyScores;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSurveyAnswerIDChanging(int value);
    partial void OnSurveyAnswerIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnAgeChanging(int value);
    partial void OnAgeChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public TestSurveyAnswer()
		{
			this._TestSurveyScores = new EntitySet<TestSurveyScore>(new Action<TestSurveyScore>(this.attach_TestSurveyScores), new Action<TestSurveyScore>(this.detach_TestSurveyScores));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SurveyAnswerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SurveyAnswerID
		{
			get
			{
				return this._SurveyAnswerID;
			}
			set
			{
				if ((this._SurveyAnswerID != value))
				{
					this.OnSurveyAnswerIDChanging(value);
					this.SendPropertyChanging();
					this._SurveyAnswerID = value;
					this.SendPropertyChanged("SurveyAnswerID");
					this.OnSurveyAnswerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(256)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age", DbType="Int NOT NULL")]
		public int Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this.OnAgeChanging(value);
					this.SendPropertyChanging();
					this._Age = value;
					this.SendPropertyChanged("Age");
					this.OnAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(512)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestSurveyAnswer_TestSurveyScore", Storage="_TestSurveyScores", ThisKey="SurveyAnswerID", OtherKey="SurveyAnswerID")]
		public EntitySet<TestSurveyScore> TestSurveyScores
		{
			get
			{
				return this._TestSurveyScores;
			}
			set
			{
				this._TestSurveyScores.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TestSurveyScores(TestSurveyScore entity)
		{
			this.SendPropertyChanging();
			entity.TestSurveyAnswer = this;
		}
		
		private void detach_TestSurveyScores(TestSurveyScore entity)
		{
			this.SendPropertyChanging();
			entity.TestSurveyAnswer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TestSurveyScores")]
	public partial class TestSurveyScore : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _SurveyAnswerID;
		
		private int _SurveyQuestionID;
		
		private int _Rating;
		
		private EntityRef<TestSurveyAnswer> _TestSurveyAnswer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSurveyAnswerIDChanging(int value);
    partial void OnSurveyAnswerIDChanged();
    partial void OnSurveyQuestionIDChanging(int value);
    partial void OnSurveyQuestionIDChanged();
    partial void OnRatingChanging(int value);
    partial void OnRatingChanged();
    #endregion
		
		public TestSurveyScore()
		{
			this._TestSurveyAnswer = default(EntityRef<TestSurveyAnswer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SurveyAnswerID", DbType="Int NOT NULL")]
		public int SurveyAnswerID
		{
			get
			{
				return this._SurveyAnswerID;
			}
			set
			{
				if ((this._SurveyAnswerID != value))
				{
					if (this._TestSurveyAnswer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSurveyAnswerIDChanging(value);
					this.SendPropertyChanging();
					this._SurveyAnswerID = value;
					this.SendPropertyChanged("SurveyAnswerID");
					this.OnSurveyAnswerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SurveyQuestionID", DbType="Int NOT NULL")]
		public int SurveyQuestionID
		{
			get
			{
				return this._SurveyQuestionID;
			}
			set
			{
				if ((this._SurveyQuestionID != value))
				{
					this.OnSurveyQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._SurveyQuestionID = value;
					this.SendPropertyChanged("SurveyQuestionID");
					this.OnSurveyQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rating", DbType="Int NOT NULL")]
		public int Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestSurveyAnswer_TestSurveyScore", Storage="_TestSurveyAnswer", ThisKey="SurveyAnswerID", OtherKey="SurveyAnswerID", IsForeignKey=true)]
		public TestSurveyAnswer TestSurveyAnswer
		{
			get
			{
				return this._TestSurveyAnswer.Entity;
			}
			set
			{
				TestSurveyAnswer previousValue = this._TestSurveyAnswer.Entity;
				if (((previousValue != value) 
							|| (this._TestSurveyAnswer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TestSurveyAnswer.Entity = null;
						previousValue.TestSurveyScores.Remove(this);
					}
					this._TestSurveyAnswer.Entity = value;
					if ((value != null))
					{
						value.TestSurveyScores.Add(this);
						this._SurveyAnswerID = value.SurveyAnswerID;
					}
					else
					{
						this._SurveyAnswerID = default(int);
					}
					this.SendPropertyChanged("TestSurveyAnswer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
